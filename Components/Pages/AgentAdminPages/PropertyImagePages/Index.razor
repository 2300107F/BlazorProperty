@page "/propertyimages"
@using Microsoft.EntityFrameworkCore
@using BlazorProperty.Domain
@inject IDbContextFactory<BlazorProperty.Data.BlazorPropertyContext> DbFactory

<PageTitle>Property Images</PageTitle>

<h1 class="text-center">Property Images</h1>

<!-- Add New Image Button -->
<div class="d-flex justify-content-end mb-3">
    <a href="/propertyimages/create" class="btn btn-success">Add New Image</a>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Image</th>
            <th>Property ID</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (images == null || !images.Any())
        {
            <tr>
                <td colspan="3" class="text-center">No images found.</td>
            </tr>
        }
        else
        {
            @foreach (var image in images)
            {
                <tr>
                    <td>
                        <img src="@image.ImageUrl" alt="Property Image" width="100" height="70" class="rounded">
                    </td>
                    <td>@image.PropertyId</td>
                    <td>
                        <a href="/propertyimages/edit/@image.PropertyImageId" class="btn btn-primary btn-sm">Edit</a>
                        <a href="/propertyimages/delete/@image.PropertyImageId" class="btn btn-danger btn-sm">Delete</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<PropertyImage> images = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        images = await context.PropertyImage.ToListAsync();
    }
}
