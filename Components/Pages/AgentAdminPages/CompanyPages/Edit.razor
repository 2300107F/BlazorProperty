@page "/companies/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorProperty.Domain
@inject IDbContextFactory<BlazorProperty.Data.BlazorPropertyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Company</PageTitle>

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">Edit Company</h2>
        </div>
        <div class="card-body">
            @if (Company is null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2"><em>Loading...</em></p>
                </div>
            }
            else
            {
                <EditForm method="post" Model="Company" OnValidSubmit="UpdateCompany" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary role="alert" class="alert alert-danger" />
                    <input type="hidden" name="Company.CompanyId" value="@Company.CompanyId" />

                    <div class="mb-3">
                        <label for="companyname" class="form-label">Company Name</label>
                        <InputText id="companyname" @bind-Value="Company.CompanyName" class="form-control" placeholder="Enter company name" />
                        <ValidationMessage For="() => Company.CompanyName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="companydescription" class="form-label">Company Description</label>
                        <InputText id="companydescription" @bind-Value="Company.CompanyDescription" class="form-control" placeholder="Enter company description" />
                        <ValidationMessage For="() => Company.CompanyDescription" class="text-danger" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <a href="/companies" class="btn btn-outline-secondary">Back to List</a>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int CompanyId { get; set; }

    [SupplyParameterFromForm]
    private Company? Company { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Company ??= await context.Company.FirstOrDefaultAsync(m => m.CompanyId == CompanyId);

        if (Company is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateCompany()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Company!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CompanyExists(Company!.CompanyId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/companies");
    }

    private bool CompanyExists(int companyid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Company.Any(e => e.CompanyId == companyid);
    }
}