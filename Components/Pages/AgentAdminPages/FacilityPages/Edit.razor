@page "/facilities/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorProperty.Domain
@inject IDbContextFactory<BlazorProperty.Data.BlazorPropertyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Facility</PageTitle>

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">Edit Facility</h2>
        </div>
        <div class="card-body">
            @if (Facility is null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2"><em>Loading...</em></p>
                </div>
            }
            else
            {
                <EditForm method="post" Model="Facility" OnValidSubmit="UpdateFacility" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />
                    <input type="hidden" name="Facility.FacilityId" value="@Facility.FacilityId" />

                    <div class="mb-3">
                        <label for="facilityname" class="form-label">Facility Name</label>
                        <InputText id="facilityname" @bind-Value="Facility.FacilityName" class="form-control" placeholder="Enter facility name" />
                        <ValidationMessage For="() => Facility.FacilityName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="facilitydescription" class="form-label">Facility Description</label>
                        <InputText id="facilitydescription" @bind-Value="Facility.FacilityDescription" class="form-control" placeholder="Enter facility description" />
                        <ValidationMessage For="() => Facility.FacilityDescription" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="regionid" class="form-label">Region ID</label>
                        <InputNumber id="regionid" @bind-Value="Facility.RegionId" class="form-control" placeholder="Enter region ID" />
                        <ValidationMessage For="() => Facility.RegionId" class="text-danger" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <a href="/facilities" class="btn btn-outline-secondary">Back to List</a>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int FacilityId { get; set; }

    [SupplyParameterFromForm]
    private Facility? Facility { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Facility ??= await context.Facility.FirstOrDefaultAsync(m => m.FacilityId == FacilityId);

        if (Facility is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateFacility()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Facility!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FacilityExists(Facility!.FacilityId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/facilities");
    }

    private bool FacilityExists(int facilityid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Facility.Any(e => e.FacilityId == facilityid);
    }
}