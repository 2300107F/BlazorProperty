@page "/properties/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorProperty.Domain
@inject IDbContextFactory<BlazorProperty.Data.BlazorPropertyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Property</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-lg">
                <div class="card-header bg-danger text-white text-center">
                    <h2><i class="bi bi-trash"></i> Delete Property</h2>
                </div>
                <div class="card-body p-4">
                    <p>Are you sure you want to delete this property?</p>
                    @if (property is null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <div class="mb-4">
                            <h3>Property Details</h3>
                            <hr />
                            <dl class="row">
                                <dt class="col-sm-4">Property Name</dt>
                                <dd class="col-sm-8">@property.PropertyName</dd>
                            </dl>
                            <dl class="row">
                                <dt class="col-sm-4">Address</dt>
                                <dd class="col-sm-8">@property.Address</dd>
                            </dl>
                            <dl class="row">
                                <dt class="col-sm-4">Price</dt>
                                <dd class="col-sm-8">@property.Price</dd>
                            </dl>
                            <dl class="row">
                                <dt class="col-sm-4">Property Type</dt>
                                <dd class="col-sm-8">@property.PropertyType</dd>
                            </dl>
                            <dl class="row">
                                <dt class="col-sm-4">Bedrooms</dt>
                                <dd class="col-sm-8">@property.Bedrooms</dd>
                            </dl>
                            <dl class="row">
                                <dt class="col-sm-4">Bathrooms</dt>
                                <dd class="col-sm-8">@property.Bathrooms</dd>
                            </dl>
                            <dl class="row">
                                <dt class="col-sm-4">Square Feet (sqft)</dt>
                                <dd class="col-sm-8">@property.Sqft</dd>
                            </dl>
                            <dl class="row">
                                <dt class="col-sm-4">Region</dt>
                                <dd class="col-sm-8">@property.RegionId</dd>
                            </dl>
                        </div>

                        <!-- Delete Confirmation -->
                        <EditForm method="post" Model="property" OnValidSubmit="DeleteProperty" FormName="deletePropertyForm">
                            <div class="text-center">
                                <button type="submit" class="btn btn-danger w-100" disabled="@(property is null)"><i class="bi bi-trash"></i> Delete Property</button>
                            </div>
                        </EditForm>

                        <!-- Back to List -->
                        <div class="text-center mt-3">
                            <a href="/properties" class="btn btn-secondary"><i class="bi bi-arrow-left"></i> Back to List</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        background-image: url('/images/background.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }
</style>

@code {
    private Property? property;

    [SupplyParameterFromQuery]
    private int PropertyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        property = await context.Property.FirstOrDefaultAsync(m => m.PropertyId == PropertyId);

        if (property is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProperty()
    {
        using var context = DbFactory.CreateDbContext();
        context.Property.Remove(property!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/properties");
    }
}
