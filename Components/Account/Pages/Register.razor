@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorProperty.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

<div class="register-container">
    <div class="register-form">
        <h1 class="register-title">Register</h1>

        <StatusMessage Message="@Message" />

        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" role="alert" />

            <div class="form-group">
                <label for="email" class="form-label">📧 Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="firstname" class="form-label">👤 First Name</label>
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="Bill" />
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="lastname" class="form-label">👤 Last Name</label>
                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="Gates" />
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">🔒 Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="confirm-password" class="form-label">🔒 Confirm Password</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <div class="agent-register-link">
                <p>Are you an Agent? Register here:</p>
                <a href="/Account/RegisterAgent" class="btn btn-outline-primary">Register as Agent</a>
            </div>

            <button type="submit" class="btn btn-primary w-100">
                <span class="btn-icon">📝</span> Register
            </button>
        </EditForm>
    </div>

    <div class="external-login-section">
        <h3>Use another service to register</h3>
        <hr />
        <ExternalLoginPicker />
    </div>
</div>

<style>
    .register-container {
        max-width: 1000px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        display: flex;
        gap: 2rem;
    }

    .register-form {
        flex: 1;
    }

    .register-title {
        font-size: 2rem;
        color: #1a365d;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        font-weight: bold;
        color: #1a365d;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 1rem;
    }

        .form-control:focus {
            border-color: #1a365d;
            box-shadow: 0 0 5px rgba(26, 54, 93, 0.5);
        }

    .validation-summary {
        color: #dc3545;
        margin-bottom: 1.5rem;
        padding: 0.5rem;
        border: 1px solid #dc3545;
        border-radius: 5px;
        background: #f8d7da;
    }

    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .agent-register-link {
        text-align: center;
        margin: 1.5rem 0;
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: #1a365d;
        color: white;
    }

        .btn-primary:hover {
            background: #12243d;
        }

    .btn-outline-primary {
        border: 1px solid #1a365d;
        color: #1a365d;
        background: transparent;
    }

        .btn-outline-primary:hover {
            background: #1a365d;
            color: white;
        }

    .btn-icon {
        font-size: 1rem;
    }

    .external-login-section {
        flex: 1;
        padding: 1rem;
        border-left: 1px solid #ccc;
    }

        .external-login-section h3 {
            font-size: 1.5rem;
            color: #1a365d;
            margin-bottom: 1rem;
        }
</style>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);


        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        //create the user role if it doesn't exist
        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }
        //add the user to the user role
        await UserManager.AddToRoleAsync(user, "User");
        //add the user id as claim when user registers
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId",
        user.Id));

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";


        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
