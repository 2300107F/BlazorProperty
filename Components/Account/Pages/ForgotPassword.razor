@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorProperty.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<PageTitle>Forgot Password - SG Realty Listings</PageTitle>

<div class="forgot-password-container">
    <div class="forgot-password-card">
        <h1 class="forgot-password-title">Forgot Your Password?</h1>
        <h2 class="forgot-password-subtitle">Enter your email to reset your password.</h2>

        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" role="alert" />

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Enter your email" />
                <ValidationMessage For="() => Input.Email" class="validation-message" />
            </div>

            <button type="submit" class="submit-button">
                Reset Password
                <i class="fas fa-arrow-right"></i>
            </button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
            return;
        }

        // Generate password reset token
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        // Create callback URL
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        // Send password reset email
        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // Redirect to confirmation page
        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = "";
    }
}

<style>
    /* Global Styles */
    :root {
        --primary-color: #1a365d;
        --accent-color: #d4af37;
        --text-light: #f8f9fa;
        --text-dark: #2d3748;
        --success-color: #28a745;
        --error-color: #dc3545;
    }

    .forgot-password-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 2rem;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    }

    .forgot-password-card {
        background: white;
        border-radius: 20px;
        padding: 3rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        max-width: 500px;
        width: 100%;
    }

    .forgot-password-title {
        font-size: 2rem;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
        text-align: center;
    }

    .forgot-password-subtitle {
        font-size: 1.2rem;
        color: #6c757d;
        text-align: center;
        margin-bottom: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group label {
            display: block;
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
        }

    .form-control {
        width: 100%;
        padding: 0.8rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            border-color: var(--accent-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(212, 175, 55, 0.2);
        }

    .validation-summary {
        color: var(--error-color);
        background: rgba(220, 53, 69, 0.1);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .validation-message {
        color: var(--error-color);
        font-size: 0.9rem;
        margin-top: 0.5rem;
        display: block;
    }

    .submit-button {
        background: var(--primary-color);
        color: var(--text-light);
        width: 100%;
        padding: 1rem;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.8rem;
    }

        .submit-button:hover {
            background: #12243d;
        }

        .submit-button i {
            transition: transform 0.3s ease;
        }

        .submit-button:hover i {
            transform: translateX(3px);
        }

    @@media (max-width: 768px) {
        .forgot-password-card {
            padding: 2rem;
        }

        .forgot-password-title {
            font-size: 1.8rem;
        }
    }
</style>